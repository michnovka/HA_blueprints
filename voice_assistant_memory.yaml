blueprint:
  name: Voice Assistant - Memory Update
  description: >
    "
    # Update memory

    This blueprint updates your voice assistant's memory stored in a var entity
    (using snarky-snark’s var component). When a voice command is issued
    (for example, "Remember that I now like tea instead of coffee"), your LLM
    will supply the full updated memory text. The prompt instructs the LLM to merge
    the new information with the current memory, preserving all details and using
    markdown formatting. The script then persists the updated memory using the var.set
    service.

    ### Requirements
    You need the snarky-snark's variable component from HACS

    #### Note:

    * Give the script a clear description. This will be used by the LLM to understand
    it should use this script for remembering / forgetting stuff.

    * **Make sure to expose the script to Assist after the script has been saved**

    #### Example for script description:

    `Update dynamic memory of Assistant. Allows both to remember and / or forget things`

    "
  domain: script
  homeassistant:
    min_version: 2025.1.0
  input:
    memory_entity:
      name: Memory Storage Entity
      description: >
        Select the var entity used to store the voice assistant's memory data.
        (For example: var.voice_assistant_memory)
      selector:
        entity:
          domain: var
    prompt_settings:
      name: Memory Processing Settings
      icon: mdi:brain
      description: >
        Configure how memory updates are processed. The LLM’s instructions here
        should tell it to merge new memory information with the existing memory,
        preserving all previous details and using markdown formatting.
      collapsed: true
      input:
        memory_prompt:
          name: Memory Processing Prompt
          description: >
            Provide instructions for the LLM to update the memory data. The LLM should
            merge the new information with the current memory while preserving every detail.
            Use markdown for formatting.
          selector:
            text:
              multiline: true
              multiple: false
          default: >
            This argument is mandatory and must always be provided no matter what!
            Always pass the entire combined memory segment - the new data and the old data.
            If you pass just the new memory, the old one will be lost
            So always evaluate the current memories, then combine them with the new information
            and pass this entire memory blob to the function
            User can also ask you to forget some information. The same rules apply. Take the current
            entire memory data you have, process it and remove the requested piece of information,
            and provide that as the new memory value
            When creating the new value for memory, make sure to keep it brief while ALWAYS preserving
            all details and present the result in markdown format (using headings or bullet points when needed)
mode: parallel
max_exceeded: silent
fields:
  memory_update:
    name: Memory Update
    description: !input memory_prompt
    selector:
      text:
        multiline: true
    required: true
sequence:
  - variables:
      version: 20250129
      memory_entity: !input memory_entity
      # Read the existing full memory stored as an attribute (defaulting to an empty string if not set)
      current_memory: "{{ state_attr(memory_entity, 'full_memory') | default('') }}"
      updated_memory: "{{ memory_update }}"
  - alias: Log current memory for debugging
    service: system_log.write
    data:
      message: "DEBUG: current_memory is: {{ current_memory }}"
      level: info
  - alias: Update var entity with timestamp and new memory attribute
    service: var.set
    data:
      entity_id: "{{ memory_entity }}"
      # Set state to a timestamp (using local time and a clear date/time format)
      value: "Last updated at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      attributes:
        full_memory: "{{ updated_memory }}"
  - stop: "Memory updated successfully"

